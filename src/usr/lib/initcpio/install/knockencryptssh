#!/bin/bash

make_etc_passwd() {
    echo 'root:x:0:0:root:/root:/bin/cryptsetup_shell' > "${BUILDROOT}"/etc/passwd
    echo '/bin/cryptsetup_shell' > "${BUILDROOT}"/etc/shells
    
    if [ "$1" == "yes" ];
    then
        echo '/bin/bash' >> "${BUILDROOT}"/etc/shells
    fi
}

code_for_knock() {
    umask 0022

    [ -d /etc/knockencryptssh ] || mkdir -p /etc/knockencryptssh

    add_checked_modules "/drivers/net/"
    add_binary "knockd"
    add_binary "chsh"
    add_binary "bash" "/bin/bash"
    add_binary "rm"
    add_binary "awk"
    add_binary "kill"
    add_binary "timeout"
    add_binary "inotifywait"

    add_full_dir "/etc/knockencryptssh"
    add_file "/lib/libnss_files.so.2"
    add_dir "/var/run"
    add_dir "/var/log"
    
    chmod a+x "${BUILDROOT}"/etc/knockencryptssh/knocked.sh
}

code_for_encryptssh() {
    local mod

    add_module dm-crypt
    if [[ $CRYPTO_MODULES ]]; then
        for mod in $CRYPTO_MODULES; do
            add_module "$mod"
        done
    else
        add_all_modules '/crypto/'
    fi

    add_binary "cryptsetup"
    add_binary "dmsetup"
    add_binary "killall"
    add_binary "awk"
    add_file "/usr/lib/udev/rules.d/10-dm.rules"
    add_file "/usr/lib/udev/rules.d/13-dm-disk.rules"
    add_file "/usr/lib/udev/rules.d/95-dm-notify.rules"
    add_file "/usr/lib/initcpio/udev/11-dm-initramfs.rules" "/usr/lib/udev/rules.d/11-dm-initramfs.rules"

    add_binary "/usr/share/mkinitcpio-utils/utils/shells/cryptsetup_shell" "/bin/cryptsetup_shell"
}

build() {
    withKnock="no"
    if [ -r "/etc/knockencryptssh/knockencryptssh.conf" -a -s "/etc/knockencryptssh/knockencryptssh.conf" -a -r "/etc/knockencryptssh/knockd.conf" -a -s "/etc/knockencryptssh/knockd.conf" ];
    then
        echo "Building with knockd and keyfile transfer support"
        
        withKnock="yes"
        
        code_for_knock
    else
        echo "There is either no knockencryptssh.conf or no knockd.conf in /etc/knockencryptssh; building without knockd and keyfile support"
        
        return 0
    fi
    
    code_for_encryptssh
    
    make_etc_passwd "${withKnock}"
    
    add_runscript
}

help() {
    cat <<HELPEOF
This hook is a drop in replacement for the encrypt and encryptssh hook and
also allows for an encrypted root device to be unlocked remotely over SSH,
either by passphrase or by keyfile transmitted over SCP (after port-knocking).
It works with both mkinitcpio-dropbear and mkinitcpio-tinyssh hooks.
It DOES NOT perform any network interface configuration.

Use this hook in combination with any early userspace networking hook, such as
mkinitcpio-netconf or mkinitcpio-ppp. Place this hook AFTER any network
configuration hook and BEFORE the filesystems hook.
When this hook is used there is no need for the encrypt or encryptssh hooks.
HELPEOF
}