#!/bin/bash


KES_KEYFILE="keyfile.bin"
KES_TEMPDIR="/tmp/knockencryptssh_initrd"
KNOCKD_PIDFILE="/var/run/knockd-knockencryptssh.pid"


do_magic() {
    /sbin/modprobe -a -q dm-crypt >/dev/null 2>&1
    
    if [ -e "/sys/class/misc/device-mapper" ]; then
        if [ ! -e "/dev/mapper/control" ]; then
            mkdir /dev/mapper
            mknod "/dev/mapper/control" c $(cat /sys/class/misc/device-mapper/dev | sed 's|:| |')
        fi
        
        [ "${quiet}" = "y" ] && CSQUIET=">/dev/null"

        # Get keyfile if specified
        ckeyfile="/${KES_KEYFILE}"
        keyfileFromCryptkey=no
        
        if [ "x${cryptkey}" != "x" ]; then
            ckdev="$(echo "${cryptkey}" | cut -d: -f1)"
            ckarg1="$(echo "${cryptkey}" | cut -d: -f2)"
            ckarg2="$(echo "${cryptkey}" | cut -d: -f3)"
            
            if poll_device "${ckdev}" ${rootdelay}; then
                case ${ckarg1} in
                    *[!0-9]*)
                        # Use a file on the device
                        # ckarg1 is not numeric: ckarg1=filesystem, ckarg2=path
                        mkdir /ckey
                        mount -r -t ${ckarg1} ${ckdev} /ckey
                        dd if=/ckey/${ckarg2} of=${ckeyfile} >/dev/null 2>&1
                        umount /ckey
                        ;;
                    *)
                        # Read raw data from the block device
                        # ckarg1 is numeric: ckarg1=offset, ckarg2=length
                        dd if=${ckdev} of=${ckeyfile} bs=1 skip=${ckarg1} count=${ckarg2} >/dev/null 2>&1
                        ;;
                esac
                
                keyfileFromCryptkey=yes
            fi
            
            [ ! -f ${ckeyfile} ] && echo "Keyfile could not be opened. Reverting to passphrase."
        fi

        if [ -n "${cryptdevice}" ]; then
            DEPRECATED_CRYPT=0
            cryptdev="$(echo "${cryptdevice}" | cut -d: -f1)"
            cryptname="$(echo "${cryptdevice}" | cut -d: -f2)"
            cryptoptions="$(echo "${cryptdevice}" | cut -d: -f3)"
        else
            DEPRECATED_CRYPT=1
            cryptdev="${root}"
            cryptname="root"
        fi

        warn_deprecated() {
            echo "The syntax 'root=${root}' where '${root}' is an encrypted volume is deprecated"
            echo "Use 'cryptdevice=${root}:root root=/dev/mapper/root' instead."
        }

        OLDIFS="${IFS}"
        IFS=","
        for cryptopt in ${cryptoptions}; do
            case ${cryptopt} in
                allow-discards)
                    echo "Enabling TRIM/discard support."
                    cryptargs="${cryptargs} --allow-discards"
                    ;;
                *)
                    echo "Encryption option '${cryptopt}' not known, ignoring." >&2
                    ;;
            esac
        done
        IFS="${OLDIFS}"

        echo ${cryptname} > /.cryptname
        echo ${cryptargs} > /.cryptargs

        if resolved=$(resolve_device "${cryptdev}" ${rootdelay}); then
            echo ${resolved} > /.cryptdev

            if /sbin/cryptsetup isLuks ${resolved} >/dev/null 2>&1; then
                [ ${DEPRECATED_CRYPT} -eq 1 ] && warn_deprecated
                dopassphrase=1
                
                # If keyfile exists, try to use that
                if [ -f ${ckeyfile} ]; then
                    if eval /sbin/cryptsetup --key-file ${ckeyfile} luksOpen ${resolved} ${cryptname} ${cryptargs} ${CSQUIET}; then
                        dopassphrase=0
                    else
                        # We're coming from knocking so let the user retry (code 99 handled by start_watching)
                        if [ "${keyfileFromCryptkey}" = "no" ]
                        then
                            return 99
                        else
                            echo "Invalid keyfile. Reverting to passphrase."
                        fi
                    fi
                fi
                
                # Ask for a passphrase
                if [ ${dopassphrase} -gt 0 ]; then
                    echo ""
                    echo "A password is required to access the ${cryptname} volume:"

                    #loop until we get a real password
                    while ! eval /sbin/cryptsetup luksOpen ${resolved} ${cryptname} ${cryptargs} ${CSQUIET}; do
                        if [ -f /.done ]; then
                            break
                        fi
                        
                        sleep 2;
                    done

                    if [ -f /.done ]; then
                        rm /.done
                    fi

                    if [ -f /.cryptdev ]; then
                        rm /.cryptdev
                    fi

                    if [ -f /.cryptname ]; then
                        rm /.cryptname
                    fi

                    if [ -f /.cryptargs ]; then
                        rm /.cryptargs
                    fi
                fi
                
                if [ -e "/dev/mapper/${cryptname}" ]; then
                    if [ ${DEPRECATED_CRYPT} -eq 1 ]; then
                        export root="/dev/mapper/root"
                    fi
                else
                    err "Password succeeded, but ${cryptname} creation failed, aborting..."
                    
                    exit 1
                fi
            elif [ -n "${crypto}" ]; then
                [ ${DEPRECATED_CRYPT} -eq 1 ] && warn_deprecated
                msg "Non-LUKS encrypted device found..."
                
                if [ $# -ne 5 ]; then
                    err "Verify parameter format: crypto=hash:cipher:keysize:offset:skip"
                    err "Non-LUKS decryption not attempted..."
                    
                    return 1
                fi
                
                exe="/sbin/cryptsetup create ${cryptname} ${cryptdev} ${cryptargs}"
                tmp=$(echo "${crypto}" | cut -d: -f1)
                [ -n "${tmp}" ] && exe="${exe} --hash \"${tmp}\""
                tmp=$(echo "${crypto}" | cut -d: -f2)
                [ -n "${tmp}" ] && exe="${exe} --cipher \"${tmp}\""
                tmp=$(echo "${crypto}" | cut -d: -f3)
                [ -n "${tmp}" ] && exe="${exe} --key-size \"${tmp}\""
                tmp=$(echo "${crypto}" | cut -d: -f4)
                [ -n "${tmp}" ] && exe="${exe} --offset \"${tmp}\""
                tmp=$(echo "${crypto}" | cut -d: -f5)
                [ -n "${tmp}" ] && exe="${exe} --skip \"${tmp}\""
                
                if [ -f ${ckeyfile} ]; then
                    exe="${exe} --key-file ${ckeyfile}"
                else
                    exe="${exe} --verify-passphrase"
                    echo ""
                    echo "A password is required to access the ${cryptname} volume:"
                fi
                
                eval "${exe} ${CSQUIET}"

                if [ $? -ne 0 ]; then
                    # We're coming from knocking so let the user retry (code 99 handled by start_watching)
                    if [ -f ${ckeyfile} -a "${keyfileFromCryptkey}" = "no" ]; then
                        return 99
                    else
                        err "Non-LUKS device decryption failed. verify format: "
                        err "      crypto=hash:cipher:keysize:offset:skip"
                        
                        exit 1
                    fi
                fi
                
                if [ -e "/dev/mapper/${cryptname}" ]; then
                    if [ ${DEPRECATED_CRYPT} -eq 1 ]; then
                        export root="/dev/mapper/root"
                    fi
                else
                    err "Password succeeded, but ${cryptname} creation failed, aborting..."
                    
                    exit 1
                fi
            else
                err "Failed to open encryption mapping: The device ${cryptdev} is not a LUKS volume and the crypto= paramater was not specified."
                
                return 1
            fi
        fi
        
        rm -f ${ckeyfile}
    fi
    
    return 0
}

start_watching() {
    # Remove $KES_TEMPDIR so we start clean and don't catch old knockfiles
    if [ "x${KES_TEMPDIR}" != "x" -a -d "${KES_TEMPDIR}" ]; then
        rm -rf "${KES_TEMPDIR}"
    fi
    
    mkdir -p "${KES_TEMPDIR}"
    
    # Reset shell
    chsh -s /bin/cryptsetup_shell root >/dev/null 2>&1
    
    echo "  Watcher started."
    
    # Wait for knock
    ( timeout 600 inotifywait -e create,open,close_write,modify --format "%f" --quiet "${KES_TEMPDIR}" --monitor & ) | while read i; do if [ "$i" == "knockencryptssh.keyfile" -o "$i" == "knockencryptssh.passphrase" ]; then break; fi; done
    
    if [ -r "${KES_TEMPDIR}/knockencryptssh.keyfile" -o -r "${KES_TEMPDIR}/knockencryptssh.passphrase" ]; then
        if [ -r "${KES_TEMPDIR}/knockencryptssh.keyfile" ]; then
            echo "  => Knock appeared, waiting for keyfile..."
            
            # Change shell so we can use SCP
            chsh -s /bin/bash root >/dev/null 2>&1
            
            # Wait two minutes for the keyfile to appear
            ( timeout 120 inotifywait -e close_write --format "%f" --quiet "/" --monitor & ) | while read i; do if [ "$i" == "${KES_KEYFILE}" ]; then break; fi; done
            
            if [ -r "/${KES_KEYFILE}" ]; then
                if [ -r "/${KES_KEYFILE}" -a -s "/${KES_KEYFILE}" ]; then
                    echo "    => Keyfile transmitted, going to decrypt..."
                    
                    # Reset shell before doing magic
                    chsh -s /bin/cryptsetup_shell root >/dev/null 2>&1
                    
                    do_magic
                    magicResult=$?
                    
                    if [ $magicResult -eq 99 ]; then
                        echo "      => Invalid keyfile, restarting watcher..."
                        
                        start_watching
                        watcherResult=$?
                        
                        return $watcherResult
                    else
                        return $magicResult
                    fi
                else
                    echo "    => Keyfile transmission failed, restarting watcher..."
                    
                    start_watching
                    watcherResult=$?
                    
                    return $watcherResult
                fi
            else
                echo "    => Keyfile not transmitted within two minutes, restarting watcher..."
                
                start_watching
                watcherResult=$?
                
                return $watcherResult
            fi
        elif [ -r "${KES_TEMPDIR}/knockencryptssh.passphrase" ]; then
            echo "  => Knock appeared, waiting for passphrase..."
            
            do_magic
            magicResult=$?
            
            return $magicResult
        else
            echo "  => Knock not recognized, restarting watch..."
            
            start_watching
            watcherResult=$?
            
            return $watcherResult
        fi
    else
        echo "  => Watcher timed out, restarting watcher..."
        
        start_watching
        watcherResult=$?
        
        return $watcherResult
    fi
    
    echo "   => Watcher finished."
    
    return 0
}

enable_knock() {
    /usr/bin/knockd -d -c /etc/knockencryptssh/knockd.conf
    
    start_watching
    watcherResult=$?
    
    return $watcherResult
}

run_hook() {
    [ -d /dev/pts ] || mkdir -p /dev/pts
    mount -t devpts devpts /dev/pts
    
    # Verify that bash is set in /etc/shells and knockd.conf exists, otherwise knocking and keyfiles aren't enabled
    if [ $(grep -c "/bin/bash" "/etc/shells") -ne 0 -a -r /etc/knockencryptssh/knockd.conf ]; then
        echo "Enabling knocking, starting watcher..."
        enable_knock
        hookResult=$?
    else
        "Switching to passphrase mode..."
        do_magic
        hookResult=$?
    fi
    
    umount /dev/pts
    rm -R /dev/pts
    
    return $hookResult
}

run_cleanuphook() {
    # Verify that bash is set in /etc/shells and knockd.conf exists, otherwise knocking and keyfiles aren't enabled
    if [ $(grep -c "/bin/bash" "/etc/shells") -ne 0 -a -r /etc/knockencryptssh/knockd.conf ]; then
        if [ -f "${KNOCKD_PIDFILE}" ]
        then
            kill `cat "${KNOCKD_PIDFILE}"`
        fi
        
        # Remove $KES_TEMPDIR as we're done
        if [ "x${KES_TEMPDIR}" != "x" -a -d "${KES_TEMPDIR}" ]; then
            rm -rf "${KES_TEMPDIR}"
        fi
    fi
}
